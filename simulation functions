#functions for solving
##SLS
MCP_SLS<-function(d,x,y,c=0.7,lambda1=NA){
  # d is lambda2
  n <- dim(x)[1]; p <- dim(x)[2]
  #A <- cor(x)
  A <- matrix(1,p,p); A[cor(x)<c] <- 0; D <- diag(apply(abs(A), 1, sum))
  L1 <- D-A; svdl1 <-svd(L1); L <- svdl1$u %*% diag(sqrt(svdl1$d)) %*% t(svdl1$v)
  xnew <- rbind(x,sqrt(n * d)*L)
  ynew <- c(y,rep(0,p))
  
  if (is.na(lambda1)){
    fit_mcpsls <- cv.ncvreg(xnew,ynew,penalty = "MCP", trace = F)
    esti <- fit_mcpsls$fit$beta[-1,which.min(fit_mcpsls$cve)]  
    lambda1 <- fit_mcpsls$lambda[which.min(fit_mcpsls$cve)]
  }
  
  if (is.numeric(lambda1)){
    fit_mcpsls <- ncvfit(xnew,ynew,lambda=lambda1,penalty = "MCP")
    esti <- fit_mcpsls$beta
    lambda1 <- fit_mcpsls$lambda
  }
  
  mse <- mean((y-x %*%esti)^2)
  k <- sum(esti!=0)
  l <- -(n/2)*log(2*pi)-(n/2)*log(mse)-n/2
  bic <- -2*l + log(n)*k
  
  return(list(coef=esti,lambda1=lambda1,mse=mse,bic=bic))
}

#LLA-LSP
llasls<- function(x,y,lambda1=.5,lambda2=.5,c=.5){
  n=dim(x)[1] ; p=dim(x)[2]; a=3.7
  cvfit <- cv.glmnet(x,y,alpha=1,tandardize = FALSE,intercept = FALSE)
  lasso <- glmnet(x,y,alpha=1,lambda=cvfit$lambda.min,standardize = FALSE,intercept = FALSE)
  betahat0<-as.matrix(coefficients(lasso)[-1]) 
  k=0; l2=1; coef0 <- betahat0; coef <- rep(0,p)
  
  A <- matrix(1,p,p); A[cor(x)<c] <- 0; D <- diag(apply(abs(A), 1, sum))
  L1 <- D-A; svdl1 <-svd(L1); L <- svdl1$u %*% diag(sqrt(svdl1$d)) %*% t(svdl1$v)
  ynew <- c(y,rep(0,p))
  
  while(l2>1e-4){
    coef<-coef0;cc<-coef;lam<-lambda1
    if(length(cc[abs(cc)>lam])!=0){
      cc<-abs(cc[abs(cc)>lam]);cc<-(abs(a*lam-cc)+(a*lam-cc))/(2*(a-1))+1e-10
      w<-coef;w[abs(w)>lam]<-lam/cc}
    if(length(cc[abs(cc)>lam])==0) w<-coef
    w[abs(w)<=lam]<-1;
    w0 <- matrix(0,p,p);diag(w0)<-w;x1<-x%*%w0
    
    xnew <- rbind(x1,sqrt(n * lambda2)*L%*%w0)
    out2 <- glmnet(xnew, ynew, lambda = lambda1,standardize = FALSE,intercept = FALSE)
    
    coef0 <- coef(out2)[-1]*w
    l2 <- mean(abs(coef-coef0))
    k <- k + 1
    if(k > 30) {
      #print("k > 30")
      #print(c(lambda1, lambda2))
      break}
  }
  c1 = coef0
  
  esti = coef0
  mse <- mean((y-x %*%esti)^2)
  k <- sum(esti!=0)
  l <- -(n/2)*log(2*pi)-(n/2)*log(mse)-n/2
  bic <- -2*l + log(n)*k
  
  return(list(coef=c1,step=k,lambda=c(lambda1,lambda2),mse=mse,bic=bic))
}



##TVP
Dmatrix <- function(x,lambda_TS=1,W = rep(1,p),c=.5, givensigma = NA){
  p = dim(x)[2]
  if (is.na(givensigma)){
    a = cor(x)
    a[abs(cor(x))<c] = 0  
  }
  else a <- givensigma
  
  a[upper.tri(cor(x), diag = TRUE)] = 0
  m = sum(a!=0)
  num = which(a!=0, arr.ind = TRUE)
  
  Gamma = matrix(0,m,p)
  u = diag(rep(1,m))
  e = diag(rep(1,p))
  for (l in 1:m) {
    Gamma_l = matrix(NA,m,p)
    u_l = as.matrix(u[,l],m,1)
    jl = num[l,1] ; kl = num[l,2]  
    e_jl = e[,jl] ; e_kl = e[,kl]
    a_jk = a[jl,kl]
    Gamma_l = a_jk * u_l %*% (e_jl-sign(a_jk)*e_kl)
    Gamma = Gamma + 2*Gamma_l
  }
  
  D = rbind(diag(W),lambda_TS*Gamma) 
  return(D)
}


tvp<- function(x,y,lambda1=1,lambda2=.5,c=.5){
  n=dim(x)[1] ; p=dim(x)[2]
  D1 <- Dmatrix(x,lambda_TS=lambda2,c = c)
  out2 <- genlasso(y, x, D1)
  coef0 <- coef(out2, lambda=lambda1)$beta
  coef0[abs(coef0)<3e-3] <- 0
  return(list(coef=coef0,lambda=c(lambda1,lambda2)))
}


##LLA+TVP

llaweighte <- function(beta,lambda1=.5){
  p <- length(beta) ; a=3.7 # a is set to be 3.7 
  cc <- abs(beta);lam <-lambda1
  weighte <-rep(NA,p)
  weighte <- (abs(a*lam-cc)+(a*lam-cc))/(2*(a-1))
  weighte[cc<lambda1] <- lambda1[cc<lambda1]
  return(weighte)
}


llatvp<- function(x,y,lambda1=1,lambda2=.5,c=.5){
  n=dim(x)[1] ; p=dim(x)[2]
  cvfit <- cv.glmnet(x,y,alpha=1,tandardize = FALSE,intercept = FALSE)
  lasso <- glmnet(x,y,alpha=1,lambda=cvfit$lambda.min,standardize = FALSE,intercept = FALSE)
  betahat0<-as.matrix(coefficients(lasso)[-1]) 
  k=0 ; coef0 <- betahat0 ; coef <- rep(0,p)
  l2=1

  while(l2>1e-4){
    coef<-coef0
    w1 <-llaweighte(coef,lambda1=lambda1)
    D1 <- Dmatrix(x, lambda_TS = lambda2, W = w1, c = c)

    out2 <- genlasso(y, x, D1)
    coef0 <- coef(out2, lambda=lambda1)$beta
    coef0[abs(coef0) < 3e-3] <- 0
    l2 <- sum((coef-coef0)^2)
    k <- k + 1
    if(k > 30) {
      #print("No convergence")
      #print(c(lambda1, lambda2))
      break}
  }
  c1=coef0
  return(list(coef=c1,step=k,lambda=c(lambda1,lambda2)))
}






#funtions for cross-validation

##elstic net
cv.elanet <- function(x,y,m){
  alphalist<-seq(0, 1, length=m)
  cvm <- rep(NA,m); lambda<- rep(NA,m)
  for (i in 1:m) {
    a <- alphalist[i]
    elasticnet <- cv.glmnet(x, y, alpha=a,tandardize = FALSE,intercept = FALSE)
    cvm[i] <- min(elasticnet$cvm)
    lambda[i] <- elasticnet$lambda[which.min(elasticnet$cvm)]
  }
  alpha_chosen <- alphalist[which.min(cvm)]
  lambda_chosen <- lambda[which.min(cvm)]
  return(c(alpha_chosen,lambda_chosen))
}

##sls
cvlambda2_mcpsls <- function(x,y,lambda2,folds = 5,c=.7){
  n <- nrow(x);p <- ncol(x)
  lable <- sample(n,n);x <- x[lable, ]; y <- y[lable]
  folds0 <- matrix(1:folds)
  mse0 <- apply(folds0, 1, fold_mcpsls,x,y,lambda2,folds,c)
  mse <- mean(mse0)
  return(mse)
}

fold_mcpsls<-function(i,x,y,lambda2,l,c=.7){#s:lambda,l=10
  l = dim(x)[1]/l
  index <- ((i-1)*l+1):(i*l)
  coef <- MCP_SLS(d=lambda2,x[-index,],y[-index],c=c)$coef
  mse <- mean((y[index]-x[index,]%*%coef)^2)
  return(mse)
}

cv.mcpsls<-function(x,y,m=10,folds = 5,c=.7){
  
  lambdalist2 <- exp(seq(log(0.1),log(20),length=m))
  
  cvfit <- cv.glmnet(x,y,alpha=1,tandardize = FALSE,intercept = FALSE)
  lasso <- glmnet(x,y,alpha=1,lambda=cvfit$lambda.min,standardize = FALSE,intercept = FALSE)
  betahat0<-as.matrix(coefficients(lasso)[-1]) 
  
  mse_seq <- rep(NA,m)
  for (j in 1:m) {
    lambda2 <- lambdalist2[j]
    mse_seq[j] <- cvlambda2_mcpsls(x,y,lambda2,folds = 5,c=c)
  }
  chosen <- which.min(mse_seq)
  
  lambda2_chonsen <- lambdalist2[chosen]
  lambda1_chosen <- MCP_SLS(d=lambda2_chonsen,x,y,c)$lambda1
  return(c(lambda1_chosen,lambda2_chonsen))
}

##lla-lsp
cvlambda_llasls <- function(x,y,lambda1,lambda2,folds = 5){
  n <- nrow(x);p <- ncol(x)
  lable <- sample(n,n);x <- x[lable, ]; y <- y[lable]
  folds0 <- matrix(1:folds)
  mse0 <- apply(folds0, 1, fold_llasls,x,y,lambda1,lambda2,folds)
  mse <- mean(mse0)
  return(mse)
}

fold_llasls<-function(i,x,y,lambda1,lambda2,l){#s:lambda,l=10
  l = dim(x)[1]/l
  index <- ((i-1)*l+1):(i*l)
  coef <- llasls(x[-index,],y[-index],lambda1,lambda2,c=c)$coef
  mse <- mean((y[index]-x[index,]%*%coef)^2)
  return(mse)
}

cv.llasls<-function(x,y,m=10,folds = 5,c=.7){
  lambda_max1 <- max(abs(t(x)%*%y)/sqrt(n));lambda_min1 <- lambda_max1 *1e-4
  #lambda_max1 <- 10;lambda_min1 <- 0.01
  lambda1_list<-exp(seq(log(lambda_min1), log(lambda_max1), length=m)) 
  lambda_max2 <- max(abs(t(x)%*%y)/sqrt(n));lambda_min2 <- lambda_max1 *1e-4
  #lambda_max2 <- 10;lambda_min2 <- 0.1
  lambda2_list <- exp(seq(log(lambda_min2),log(lambda_max2),length=m))
  
  mse_matrix <- matrix(NA,m,m)
  for (i in 1:m) {
    for (j in 1:m) {
      lambda1 <- lambda1_list[i];lambda2 <- lambda2_list[j]
      mse_matrix[i,j] <- cvlambda_llasls(x,y,lambda1,lambda2,folds = 5)
    }
  }
  
  min_mse<-min(mse_matrix)
  chosen <- which(mse_matrix==min_mse,arr.ind=T)
  lambda1_chonsen <- lambda1_list[chosen[1]] 
  lambda2_chonsen <- lambda2_list[chosen[2]]
  lambda_chonsen<-c(lambda1_chonsen,lambda2_chonsen)
  return(lambda_chonsen)
}

##tvp
cvlambda_tvp <- function(x,y,lambda1,lambda2,folds = 5){
  n <- nrow(x);p <- ncol(x)
  lable <- sample(n,n);x <- x[lable, ]; y <- y[lable]
  folds0 <- matrix(1:folds)
  mse0 <- apply(folds0, 1, fold_tvp,x,y,lambda1,lambda2,folds)
  mse <- mean(mse0)
  return(mse)
}

fold_tvp<-function(i,x,y,lambda1,lambda2,l){#s:lambda,l=10
  l = dim(x)[1]/l
  index <- ((i-1)*l+1):(i*l)
  coef <- tvp(x[-index,],y[-index],lambda1,lambda2,c=c)$coef
  mse <- mean((y[index]-x[index,]%*%coef)^2)
  return(mse)
}

cv.tvp<-function(x,y,m=10,folds = 5,c=.7){
  lambda_max1 <- max(abs(t(x)%*%y)/sqrt(n));lambda_min1 <- lambda_max1 *1e-4
  #lambda_max1 <- 20;lambda_min1 <- 0.01
  lambda1_list<-exp(seq(log(lambda_min1), log(lambda_max1), length=m))  
  lambda_max2 <- max(abs(t(x)%*%y)/sqrt(n));lambda_min2 <- lambda_max1 *1e-4
  #lambda_max2 <- 20;lambda_min2 <- 0.1
  lambda2_list <- exp(seq(log(lambda_min2),log(lambda_max2),length=m))
  
  mse_matrix <- matrix(NA,m,m)
  for (i in 1:m) {
    for (j in 1:m) {
      lambda1 <- lambda1_list[i];lambda2 <- lambda2_list[j]
      mse_matrix[i,j] <- cvlambda_tvp(x,y,lambda1,lambda2,folds = 5)
    }
  }
  
  min_mse<-min(mse_matrix)
  chosen <- which(mse_matrix==min_mse,arr.ind=T)
  lambda1_chonsen <- lambda1_list[chosen[1]] 
  lambda2_chonsen <- lambda2_list[chosen[2]]
  lambda_chonsen<-c(lambda1_chonsen,lambda2_chonsen)
  return(lambda_chonsen)
}

##lla-tvp
cvlambda_llatvp <- function(x,y,lambda1,lambda2,folds = 5){
  n <- nrow(x);p <- ncol(x)
  lable <- sample(n,n);x <- x[lable, ]; y <- y[lable]
  folds0 <- matrix(1:folds)
  mse0 <- apply(folds0, 1, fold_llatvp,x,y,lambda1,lambda2,folds)
  mse <- mean(mse0)
  return(mse)
}

fold_llatvp<-function(i,x,y,lambda1,lambda2,l){#s:lambda,l=10
  l = dim(x)[1]/l
  index <- ((i-1)*l+1):(i*l)
  coef <- llatvp(x[-index,],y[-index],lambda1,lambda2,c=c)$coef
  mse <- mean((y[index]-x[index,]%*%coef)^2)
  return(mse)
}

cv.llatvp<-function(x,y,m=10,folds = 5,c=.7){
  lambda_max1 <- max(abs(t(x)%*%y)/sqrt(n));lambda_min1 <- lambda_max1 *1e-4
  #lambda_max1 <- 20;lambda_min1 <- 0.01
  lambda1_list<-exp(seq(log(lambda_min1), log(lambda_max1), length=m))  
  lambda_max2 <- max(abs(t(x)%*%y)/sqrt(n));lambda_min2 <- lambda_max1 *1e-4
  #lambda_max2 <- 20;lambda_min2 <- 0.1
  lambda2_list <- exp(seq(log(lambda_min2),log(lambda_max2),length=m))
  
  mse_matrix <- matrix(NA,m,m)
  for (i in 1:m) {
    for (j in 1:m) {
      lambda1 <- lambda1_list[i];lambda2 <- lambda2_list[j]
      mse_matrix[i,j] <- cvlambda_llatvp(x,y,lambda1,lambda2,folds = 5)
    }
  }
  
  min_mse<-min(mse_matrix)
  chosen <- which(mse_matrix==min_mse,arr.ind=T)
  lambda1_chonsen <- lambda1_list[chosen[1]] 
  lambda2_chonsen <- lambda2_list[chosen[2]]
  lambda_chonsen<-c(lambda1_chonsen,lambda2_chonsen)
  return(lambda_chonsen)
}
